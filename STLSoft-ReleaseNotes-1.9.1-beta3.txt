================================================================================

File:     STLSoft-ReleaseNotes-1.9.1-beta3

Purpose:  Release notes for beta release of STLSoft.

Author:   Matthew Wilson, Synesis Software Pty Ltd.

          Copyright (c) 2002-2006, Synesis Software Pty Ltd.
          All rights reserved.

www:      http://www.stlsoft.org/

Date:     20th January 2006

================================================================================
================================================================================

Changes for 1.9.1 beta 3 (20th January 2006)

There are a few minor directory changes, a few bug fixes, and quite a lot of
new components.

Extended STL
============

Many of the additions in this beta pertain to concepts and components introduced
in my forthcoming book "Extended STL, Volume 1" (see http://extendedstl.com/), 
to be published by Addison-Wesley later this year. Obviously some of these are
without publicly accessible explanations at the moment, but as the book
publication draws near, some, at least, will receive publicly accessible
treatments. As for the rest, well you'll have to invest in "Extended STL". ;-)

Additions:
==========

+ stlsoft/collections.hpp: contains new collection concept tags

+ stlsoft::external_iterator_invalidation
  (stlsoft/exceptions/external_iterator_invalidation.hpp): new exception class
  for representing iterator interruption by external agents

+ stlsoft::iteration_interruption 
  (stlsoft/exceptions/iteration_interruption.hpp): a new exception class that
  acts as the base for iterator interruption

+ stlsoft::adapted_iterator_traits (stlsoft/adapted_iterator_traits.hpp): an
  omniscient iterator adaptor class that can detect iterator category, 
  mutability, and element reference category (a new concept that is introduced
  in "Extended STL").

+ stlsoft::filter_iterator (stlsoft/filter_iterator.hpp): an
  iterator adaptor class that can be used to filter out elements based on a
  predicate.

+ stlsoft/transform_filter_iterator.hpp and 
  stlsoft/filter_transform_iterator.hpp: contains creator functions for
  mixing filter_iterator and transform_iterator iterator adaptors.

+ several new components for detecting standard library features, and assisting
  with handling iterator categories, in: 
    stlsoft\util\std\dinkumware_iterator_traits.hpp
    stlsoft\util\std\iterator_category_limiters.hpp
    stlsoft\util\std\stdio_overload_detectors.hpp

+ inetstl::basic_ftpdir_sequence (inetstl/ftpdir_sequence.hpp): a new collection
  class that provides a vector-like interface over the contents of an FTP server
  directory; implemented in terms of inetstl::basic_findfile_sequence

+ mfcstl::CString_cadaptor and mfcstl::CString_iadaptor 
  (mfcstl/cstring_adaptors.hpp): class and instance
  adaptors for CString, dragging it kicking and screaming into conformance with
  std::basic_string

+ rangelib::range_exception and rangelib::empty_range_exception
  (rangelib/exceptions.hpp): new exception classes used by RangeLib components

+ rangelib::filter_sequence (rangelib/filtered_sequence.hpp): a new creator
  function that returns an instance of range_lib::filtered_range specialised
  with a rangelib::sequence_range applied to the given STL sequence.

+ rangelib::iterator_range (rangelib/iterator_range.hpp): a new class that
  adapts a pair of iterators to the Range concept

+ winstl::child_window_sequence (winstl/child_window_sequence.hpp): a new class
  that presents an STL collection over the set of child windows of a given
  window.

Changes:
========

~ stlsoft::auto_buffer has the 2nd and 3rd template parameters reversed. The
  internal array size parameter is now 2nd, and the allocator parameter is now
  3rd. All STLSoft components are updated accordingly. Backwards compatibility
  is provided in the form of stlsoft::auto_buffer_old

~ stlsoft::proxy_ptr is renamed to stlsoft::ptr_proxy. The old form is available
  for backwards compatibility

~ winstl::window_peer_sequence is now implemented in terms of new 
  zorder_sequence_base, as discussed in the chapter "Travelling Back and Forth
  on the Z-Plane" from "Extended STL".

Removals:
=========

- mfcstl::cstring_veneer (mfcstl_cstring_veneer.h) is now deprecated, in favour
  of the new mfcstl::CString_cadaptor
  
Directory structure changes:
============================

~ stlsoft/filter_iterator.hpp => stlsoft/iterators/filter_iterator.hpp

~ stlsoft/member_traits.hpp => stlsoft/meta/member_traits.hpp

~ stlsoft/type_traits.hpp => stlsoft/meta/base_type_traits.hpp

~ stlsoft_array_proxy.h => stlsoft/array_proxy.hpp

~ stlsoft_container_base.h => stlsoft/obsolete/container_base.hpp

~ stlsoft_proxy_ptr.h => stlsoft/ptr_proxy.hpp


Diffs:
======

  root-dir-2: H:\3Pty\stlsoft\1.9.1-beta2
  root-dir-2: H:\3Pty\stlsoft\1.9.1-beta3



================================================================================

Changes for 1.9.1 beta 2 (27th December 2005)


Lots of minor code format / directory structure changes

Additions:
==========

+ stlsoft::exception_string class. (Replaces simple_string in exception classes)

+ stlsoft::string_concatenator_iterator

Removals:
=========

- stlsoft::tref_reverse_iterator


Diffs:
======

  root-dir-2: H:\3Pty\stlsoft\1.9.1-beta1
  root-dir-2: H:\3Pty\stlsoft\1.9.1-beta2



================================================================================

Changes for 1.9.1 beta 1 (20th December 2005)

STLSoft
=======

- includes alpha version of new XMLSTL sub-project
- (nearly) completes the change of directory structure, e.g. from
    winstl_shell_allocator.h => winstl/shell_allocator.hpp
- several new components


Additions:
==========

+ STLSOFT_CDECL_VALUE (1), STLSOFT_FASTCALL_VALUE(2) and
  STLSOFT_STDCALL_VALUE (3) to stlsoft.h
+ More operating systems detected in unixstl.h
+ Operating system family detection in unixstl.h

+ stlsoft::active_end_iterator_exhaustion (stlsoft/exceptions/active_end_iterator_exhaustion.hpp)

+ stlsoft::ostream_iterator (stlsoft/iterators/ostream_iterator.hpp) - an
  enhancement to std::ostream_iterator, which supports prefix and suffix

+ stlsoft::transform_iterator.hpp (stlsoft/iterators/transform_iterator.hpp)

+ comstl/stream_functions.h

+ mfcstl::CArray_cadaptor / mfcstl::CArray_iadaptor - class and instance
  adaptors for the MFC CArray family of containers to STL interfaces.

+ platformstl::environment_map (platformstl/environment_map.hpp)

+ winstl::dl_call() - Extremely powerful Dynamic Library Function invocation

+ winstl/console_functions.h

+ unixstl::dl_call() - Extremely powerful Dynamic Library Function invocation


Changes:
========

ATLSTL       1.4.3 => 1.4.4
COMSTL       1.5.4 => 1.6.1
.netSTL      1.2.2 => 1.2.3
InetSTL      1.1.3 => 1.1.4
MFCSTL       1.4.2 => 1.4.3
PlatformSTL  1.3.1 => 1.4.1
UNIXSTL      1.5.1 => 1.6.1
WinSTL       1.7.1 => 1.8.1


+ dotnetstl/string_access.hpp and dotnetstl/string_accessor.hpp have been
  updated to support VC++ 8 hat syntax

+ stlsoft::ref_ptr now supports equality comparison

+ stlsoft::shared_ptr::use_count()
+ stlsoft::shared_ptr contract enforcements

+ winstl::pid_sequence now supports reverse iteration
+ winstl::process_module_sequence now supports reverse iteration

~ 

Fixes:
======

~ stlsoft::string_tokeniser::const_iterator declared as forward iterator

~ winstl/find_file_sequence.hpp - fix for bug when zero-length sub-path matched

~ 

Diffs:
======

  root-dir-1: H:\3Pty\stlsoft\1.8.3\include
  root-dir-2: H:\3Pty\stlsoft\1.8.4-beta1

